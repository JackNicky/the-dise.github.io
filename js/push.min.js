(function(a, h) {
    "function" === typeof define && define.amd ? define(function() {
        return new(h(a, a.document))
    }) : "undefined" !== typeof module && module.exports ? module.exports = new(h(a, a.document)) : a.Push = new(h(a, a.document))
})("undefined" !== typeof window ? window : this, function(a, h) {
    return function() {
        var c = this,
            l = function(a) {
                return a && "[object Function]" === {}.toString.call(a)
            },
            h = 0,
            e = {},
            n = function(d) {
                var b = e[d];
                if ("undefined" !== typeof b) {
                    if (b.close) b.close();
                    else if (b.cancel) b.cancel();
                    else if (a.external && a.external.msIsSiteMode) a.external.msSiteModeClearIconOverlay();
                    else throw Error("Unable to close notification: unknown interface");
                    return m(d)
                }
                return !1
            },
            p = function(a) {
                var b = h;
                e[b] = a;
                h++;
                return b
            },
            m = function(a) {
                var b = {},
                    d = !1,
                    c;
                for (c in e) e.hasOwnProperty(c) && (c != a ? b[c] = e[c] : d = !0);
                e = b;
                return d
            },
            q = function(a, b) {
                var d = {
                    get: function() {
                        return e[a]
                    },
                    close: function() {
                        n(a)
                    }
                };
                b.timeout && setTimeout(function() {
                    d.close()
                }, b.timeout);
                return d
            },
            r = function(d, b, e) {
                b = b || {};
                c.lastWorkerPath = b.serviceWorker || "serviceWorker.js";
                var g = function(a) {
                    m(a);
                    l(b.onClose) && b.onClose.call(this,
                        f)
                };
                if (a.Notification) try {
                        var f = new a.Notification(d, {
                            icon: "string" === typeof b.icon || void 0 === b.icon ? b.icon : b.icon.x32,
                            body: b.body,
                            tag: b.tag,
                            requireInteraction: b.requireInteraction
                        })
                    } catch (v) {
                        a.navigator && (a.navigator.serviceWorker.register(c.lastWorkerPath), a.navigator.serviceWorker.ready.then(function(a) {
                            var c = {
                                id: h,
                                link: b.link,
                                origin: document.location.href,
                                onClick: l(b.onClick) ? b.onClick.toString() : "",
                                onClose: l(b.onClose) ? b.onClose.toString() : ""
                            };
                            "undefined" !== typeof b.data && null !== b.data && (c = Object.assign(c,
                                b.data));
                            a.showNotification(d, {
                                icon: b.icon,
                                body: b.body,
                                vibrate: b.vibrate,
                                tag: b.tag,
                                data: c,
                                requireInteraction: b.requireInteraction
                            }).then(function() {
                                var d;
                                a.getNotifications().then(function(c) {
                                    d = p(c[c.length - 1]);
                                    a.active.postMessage("");
                                    navigator.serviceWorker.addEventListener("message", function(b) {
                                        b = JSON.parse(b.data);
                                        "close" === b.action && Number.isInteger(b.id) && m(b.id)
                                    });
                                    e(q(d, b))
                                })
                            })
                        }))
                    } else if (a.webkitNotifications) f = a.webkitNotifications.createNotification(b.icon, d, b.body), f.show();
                    else if (navigator.mozNotification) f =
                    navigator.mozNotification.createNotification(d, b.body, b.icon), f.show();
                else if (a.external && a.external.msIsSiteMode()) a.external.msSiteModeClearIconOverlay(), a.external.msSiteModeSetIconOverlay("string" === typeof b.icon || void 0 === b.icon ? b.icon : b.icon.x16, d), a.external.msSiteModeActivate(), f = {};
                else throw Error("Unable to create notification: unknown interface");
                if ("undefined" !== typeof f) {
                    var k = p(f),
                        t = q(k, b);
                    l(b.onShow) && f.addEventListener("show", b.onShow);
                    l(b.onError) && f.addEventListener("error", b.onError);
                    l(b.onClick) && f.addEventListener("click", b.onClick);
                    f.addEventListener("close", function() {
                        g(k)
                    });
                    f.addEventListener("cancel", function() {
                        g(k)
                    });
                    e(t)
                }
                e({})
            },
            g = {
                DEFAULT: "default",
                GRANTED: "granted",
                DENIED: "denied"
            },
            u = [g.GRANTED, g.DEFAULT, g.DENIED];
        c.Permission = g;
        c.Permission.request = function(d, b) {
            var e = c.Permission.get();
            if (!c.isSupported) throw Error("PushError: push.js is incompatible with browser.");
            callback = function(a) {
                switch (a) {
                    case c.Permission.GRANTED:
                        d && d();
                        break;
                    case c.Permission.DENIED:
                        b && b()
                }
            };
            if (e !== c.Permission.DEFAULT) callback(e);
            else if (a.Notification && a.Notification.requestPermission) Notification.requestPermission(callback);
            else if (a.webkitNotifications && a.webkitNotifications.checkPermission) a.webkitNotifications.requestPermission(callback);
            else throw Error("PushError: push.js is incompatible with browser.");
        };
        c.Permission.has = function() {
            return g.get() === g.GRANTED
        };
        c.Permission.get = function() {
            if (!c.isSupported) throw Error("PushError: push.js is incompatible with browser.");
            if (a.Notification &&
                a.Notification.permissionLevel) var d = a.Notification.permissionLevel;
            else if (a.webkitNotifications && a.webkitNotifications.checkPermission) d = u[a.webkitNotifications.checkPermission()];
            else if (a.Notification && a.Notification.permission) d = a.Notification.permission;
            else if (navigator.mozNotification) d = g.GRANTED;
            else if (a.external && void 0 !== a.external.msIsSiteMode()) d = a.external.msIsSiteMode() ? g.GRANTED : g.DEFAULT;
            else throw Error("PushError: push.js is incompatible with browser.");
            return d
        };
        c.isSupported =
            function() {
                var d = !1;
                try {
                    d = !!(a.Notification || a.webkitNotifications || navigator.mozNotification || a.external && void 0 !== a.external.msIsSiteMode())
                } catch (b) {}
                return d
            }();
        c.create = function(a, b) {
            if (!c.isSupported) throw Error("PushError: push.js is incompatible with browser.");
            if ("string" !== typeof a) throw Error("PushError: Title of notification must be a string");
            var d = c.Permission.has() ? function(d, c) {
                try {
                    r(a, b, d)
                } catch (k) {
                    c(k)
                }
            } : function(d, e) {
                c.Permission.request(function() {
                        try {
                            r(a, b, d)
                        } catch (k) {
                            e(k)
                        }
                    },
                    function() {
                        e("Permission request declined")
                    })
            };
            return new Promise(d)
        };
        c.count = function() {
            var a = 0,
                b;
            for (b in e) a++;
            return a
        };
        c.__lastWorkerPath = function() {
            return c.lastWorkerPath
        };
        c.close = function(a) {
            for (var b in e)
                if (notification = e[b], notification.tag === a) return n(b)
        };
        c.clear = function() {
            var a = !0;
            for (key in e) a = a && n(key);
            return a
        }
    }
});